swagger: "2.0"

info:
  version: 1.0.0
  title: Staff app API
schemes:
  - http
basePath: /staff
produces:
  - application/json

paths:
  /health:
    get:
      description: application health check
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Health'
            type: array
      summary: application health check

  /signup:
    post:
      consumes:
        - application/json
      description: User registration
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: User registration

  /signin:
    post:
      consumes:
        - application/json
      description: User sign in
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.Credentials'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Error'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: User sign in

  /password/required:
    post:
      consumes:
        - application/json
      description: Changing temporary password
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.Credentials'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Error'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Changing temporary password

  /signout:
    post:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Removes tokens from cookies
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Error'
      summary: Removes tokens from cookies

  /user:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Retrieves authorised user data
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves user data
    put:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Updates basic user data
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.UserUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Updates basic user data

  /user/{id}:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Retrieves user data
      parameters:
        - $ref: '#/parameters/ObjectID'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves user data
    put:
      tags:
        - Admin Only
      consumes:
        - application/json
      description: Updates full user data
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ObjectID'
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.AdminUserUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Updates full user data

  /user/search:
    post:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Search user by name
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.UserSearch'
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Search user by name

  /user/admins:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Get admins
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.UserSearch'
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Get admins


  /user/photo:
    post:
      tags:
        - Authorised
      consumes:
        - "multipart/form-data"
      description: Upload user photo
      produces:
        - application/json
      parameters:
        - in: formData
          name: photo
          type: file
          required: true
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Upload user photo

  /task:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Retrieves all tasks for authorised user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TaskResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all tasks for authorised user
    post:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Create new task
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/models.TaskRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponse'
        "404":
          description: Assigned user not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Create new task

  /task/{id}:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Retrieves task by id
      parameters:
        - $ref: '#/parameters/ObjectID'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves task by id
    put:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Update task
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ObjectID'
        - in: body
          name: task
          schema:
            $ref: '#/definitions/models.TaskUpdateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Update task
    delete:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Updates task
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ObjectID'
      responses:
        "204":
          description: OK
      summary: Delete task

  /task/list:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Retrieves all tasks with limit
      parameters:
        - in: query
          name: from
          type: integer
          description: Task index
        - in: query
          name: size
          type: integer
          description: Amount of tasks to retrieve
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TaskResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all tasks with limit

  /task/search:
    post:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Search in my tasks
      parameters:
        - in: body
          name: task search
          schema:
            $ref: '#/definitions/models.TaskSearch'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TaskElastic'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Search in my tasks

  /task/search/all:
    post:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Search in all tasks
      parameters:
        - in: body
          name: task search
          schema:
            $ref: '#/definitions/models.TaskSearch'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TaskElastic'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Search in all tasks

  /task/user/{id}:
    get:
      tags:
        - Authorised
      consumes:
        - application/json
      description: Retrieves all tasks for user by id
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ObjectID'
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TaskResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all tasks for user by id


  /recent:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Retrieves all recent changes for current user
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.RecentChanges'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all recent changes for current user

  /recent/user/{id}:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Retrieves all recent changes for user
      parameters:
        - $ref: '#/parameters/ObjectID'
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.RecentChanges'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all recent changes for user

  /vacations:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Retrieves all vacations for current user
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all vacations for current user
    post:
      tags:
        - Authorised
      produces:
        - application/json
      parameters:
        - in: body
          name: task search
          schema:
            $ref: '#/definitions/models.CreateVacation'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Creates new vacation for current user

  /vacations/{id}:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Cancel vacation for user
      parameters:
        - $ref: '#/parameters/ObjectID'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Cancel vacation for user
    delete:
      tags:
        - Authorised
      produces:
        - application/json
      description: Cancel vacation for user
      parameters:
        - $ref: '#/parameters/ObjectID'
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Cancel vacation for user
    put:
      tags:
        - Admin Only
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/ObjectID'
        - in: body
          name: VacationStatusUpdate
          schema:
            $ref: '#/definitions/models.VacationStatusUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Updates vacation status

  /vacations/user/{id}:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Retrieves vacation for user
      parameters:
        - $ref: '#/parameters/ObjectID'
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves vacation for user

  /vacations/pending:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Retrieves all pending vacations
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all pending vacations

  /vacations/all:
    get:
      tags:
        - Authorised
      produces:
        - application/json
      description: Retrieves all actual vacations
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Vacation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      summary: Retrieves all actual vacations


definitions:

  common.Error:
    properties:
      message:
        type: string
    type: object

  models.UserRequest:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      position:
        type: string
      email:
        type: string
      role:
        type: string
        enum: ["admin", "user"]

  models.UserResponse:
    type: object
    properties:
      id:
        type: string
        format: uuid
      firstName:
        type: string
      lastName:
        type: string
      position:
        type: string
      email:
        type: string
      role:
        type: string
        enum: [admin, user]
      mobilePhone:
        type: string
      dateOfBirth:
        type: string
      imageURL:
        type: string

  models.Credentials:
    type: object
    properties:
      password:
        type: string
      email:
        type: string

  models.UserUpdate:
    type: object
    properties:
      mobilePhone:
        type: string
      dateOfBirth:
        type: string

  models.AdminUserUpdate:
    type: object
    properties:
      mobilePhone:
        type: string
      dateOfBirth:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      position:
        type: string
      role:
        type: string
        enum: ["admin", "user"]

  models.UserSearch:
    type: object
    properties:
      name:
        type: string
        description: "Search can work with several symbols"
      position:
        type: string
        description: "Should be provided full word (optional)"

  models.Health:
    properties:
      currentTime:
        type: string
      startTime:
        type: string
      networkInterfaces:
        type: array
        items:
          type: string
      connections:
        type: array
        items:
          type: object
          properties:
            serviceName:
              type: string
            activeNodes:
              type: array
              items:
                type: string
            downNodes:
              type: array
              items:
                type: string

  models.TaskRequest:
    properties:
      title:
        type: string
      description:
        type: string
      assignedID:
        type: string
        format: uuid

  models.TaskUpdateRequest:
    properties:
      title:
        type: string
      description:
        type: string
      assignedID:
        type: string
        format: uuid
      status:
        type: string
        enum: ["Ready", "InProgress", "Done", "Blocked"]

  models.TaskResponse:
    properties:
      id:
        type: string
        format: uuid
      number:
        type: string
      title:
        type: string
      description:
        type: string
      createdBy:
        type: object
        $ref: '#/definitions/models.UserResponse'
      updatedBy:
        type: object
        $ref: '#/definitions/models.UserResponse'
      assigned:
        type: object
        $ref: '#/definitions/models.UserResponse'
      updatedAt:
        type: string
        format: time
      createdAt:
        type: string
        format: time
      status:
        type: string
        enum: ["Ready", "InProgress", "Done", "Blocked"]

  models.RecentChanges:
    properties:
      id:
        type: string
        format: uuid
      title:
        type: string
      userName:
        type: string
        description: First and Last name of assigned user
      userID:
        type: string
        format: uuid
        description: Assigned userID
      ownerID:
        type: string
        format: uuid
        description: task creator or vacation requester
      updatedByName:
        type: string
        description: First and Last name of user who update an item
      updatedByID:
        type: string
        format: uuid
      incidentID:
        type: string
        format: uuid
        description: In case of task changes it`s taskID, In case of vacation it`s vacationID
      type:
        type: string
        enum: ["Assignment", "TaskStatusChange", "VacationApprove", "VacationRequest"]
      changeTime:
        type: string
        format: time

  models.TaskSearch:
    properties:
      search:
        type: string

  models.TaskElastic:
    properties:
      id:
        type: string
        format: uuid
      title:
        type: string
      description:
        type: string
      assignedID:
        type: string
        format: uuid
      createdByID:
        type: string
        format: uuid
      updatedByID:
        type: string
        format: uuid
      updatedAt:
        type: string
        format: time
      createdAt:
        type: string
        format: time
      status:
        type: string
        enum: ["Ready", "InProgress", "Done", "Blocked"]

  models.Vacation:
    properties:
      id:
        type: string
        format: uuid
      number:
        type: integer
      user:
        type: object
        $ref: '#/definitions/models.UserResponse'
      startDate:
        type: string
        format: time
      endDate:
        type: string
        format: time
      status:
        type: string
        enum: ["Pending", "Approved", "Rejected", "Canceled", "Expired"]
      updateTime:
        type: string
        format: time
      statusChanger:
        type: object
        $ref: '#/definitions/models.UserResponse'
      wasApproved:
        type: boolean

  models.VacationDB:
    properties:
      id:
        type: string
        format: uuid
      number:
        type: integer
      userID:
        type: string
        format: uuid
      userFullName:
        type: string
      startDate:
        type: string
        format: time
      endDate:
        type: string
        format: time
      status:
        type: string
        enum: ["Pending", "Approved", "Rejected", "Canceled", "Expired"]
      updateTime:
        type: string
        format: time
      statusChangerID:
        type: string
        format: uuid
      statusChangerFullName:
        type: string
      wasApproved:
        type: boolean

  models.CreateVacation:
    properties:
      startDate:
        type: string
        format: date
      endDate:
        type: string
        format: date

  models.VacationStatusUpdate:
    properties:
      status:
        type: string
        enum: ["Approved", "Rejected"]



parameters:
  ObjectID:
    in: path
    name: id
    type: string
    format: uuid
    required: true

